generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  name       String?
  externalId String?   @unique /// OIDC sub/oid from Entra External ID
  /// Status: ACTIVE | INACTIVE | DELETED
  status     String    @default("ACTIVE")
  createdAt  DateTime  @default(now())
  bookings   Booking[]
}

/// Hinweis: Enums werden von SQLite/Prisma nicht nativ unterstützt.
/// Stattdessen verwenden wir String-Felder mit Konventionen.

model Course {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  capacity    Int?
  priceCents  Int?       /// Preis in Cent, optional in v1
  startAt     DateTime?
  endAt       DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  materials   Material[]
  bookings    Booking[]
}

model Booking {
  id         Int           @id @default(autoincrement())
  userId     Int
  courseId   Int
  /// Werte: BOOKED | CANCELLED | COMPLETED
  status     String        @default("BOOKED")
  bookedAt   DateTime      @default(now())
  cancelledAt DateTime?

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@index([userId])
  @@index([courseId])
}

model Material {
  id        Int          @id @default(autoincrement())
  courseId  Int
  /// Werte: TEXT | VIDEO
  type      String       @default("TEXT")
  title     String
  url       String       /// Pfad/URL (für Streaming-Proxy/CDN)
  isActive  Boolean      @default(true)

  course Course @relation(fields: [courseId], references: [id])

  @@index([courseId])
}
